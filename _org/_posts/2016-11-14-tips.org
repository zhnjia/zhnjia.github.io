#+OPTIONS: ^:nil toc:nil \n:t
#+STARTUP: showall indent
#+STARTUP: hidestars

#+md: ---
layout: page
title: All tips
#+md: ---
#+TOC: headlines 2

* java
** decompile android apk
#+begin_src sh
 $ unzip app.apk -d app
 $ cd app; dex2jar.sh ./classes.dex
 $ unzip ./classes_dex2jar.jar -d source
 $ jd-gui&
#+end_src

* http
** content-encoding
 1. rfc2616 规定传输的内容可以进行压缩后传输，content-length为压缩后的文件大小
 2. 其中content-encoding可以指定4种值：
    1) gzip, 用gnu zip格式压缩
    2) compress, 采用unix的文件压缩程序
    3) deflate, 采用zlib格式压缩
    4) identity, 没有编码，如果没有content-encoding, 就默认为这种方式
** filename
 1. filename最早出现在rfc1806 中对"Content-Dispositon" 的定义：
    #+BEGIN_VERSE
    filename-parm := "filename" "=" value;
    #+END_VERSE
    value的取值根据rfc822 和rfc1521 定义。
 2. 之后rfc2626(1999年http1.1标准），第19.5.1节介绍了"Content-Disposition"的定义[[[http://tools.ietf.org/html/rfc2616#section-19.5.1][rfc2616#section-19.5.1]]]
    #+BEGIN_VERSE
    content-disposition = "Content-Disposition" ":"
    disposition-type *( ";" disposition-parm )
    disposition-type = "attachment" | disp-extension-token
    disposition-parm = filename-parm | disp-extension-parm
    filename-parm = "filename" "=" quoted-string
    disp-extension-token = token
    disp-extension-parm = token "=" ( token | quoted-string )
    #+END_VERSE
   其中就定义了filename,标准中指明filename不允许指定文件路径，仅作为完整文件名的最
   后一部分。还有一个例子：Content-Disposition: attachment; filename="fname.ext"。
   由此最早filename应该是"＝"后用（"）包含起来的ASCII码字符串，ISO-8859-1以外的字符
   应根据rfc2047 进行转换转换规则为filename= "=?" charset "?" encoding "?" encoded-text "?="。
 3. rfc2231 对rfc2047 的转换规则添加了扩展, 支持filename*= charset "'" [language] "'" encoded-text(percent-encode);
   （根据网上反馈资料，为了适配IE浏览器而采用的是混合模式，即：filename="encoded-text")
 4. 随着网络的发展，2011年rfc6266 对Content-Disposition 进行了规范。rfc6266指明：
    #+BEGIN_VERSE
    filename-parm = "filename" "=" value | "filename*" "=" ext-value
    #+END_VERSE
    - 如果使用filename ＝ value, value使用rfc2616的定义
    - 如果使用filename *＝ ext-value, ext-value使用rfc5987的定义，rfc5987 规定采用rfc2231 的转换规则

 5. 总结
   filename可能出现四种编码格式：
    - rfc2616: filename="filename"
    - rfc2047: filename="=?UTF-8?encoding?encoded-filename?="
    - rfc2231: filename*=UTF-8'[en]'percent-encoded-filename
    - IE:      filename="percent-encoded-filename"!

 6. 算法
   根据上述理论依据，以及参考android的guessfilename函数filename做如下解析：
   #+BEGIN_SRC c++
     if (Content-Disposition != null) {
         if (get(filename*) != null) {
             rfc2231_decode();
         } else if (get(filename) != null) {
             if (rfc2047_decode() == ok) return;
             if (IE_decode() == ok) return;
             rfc2616_decode();
         }
     } else {
         get_file_name_from_url();
     }
     if (mimetype != null) {
         append_extention_to_filename();
     }
   #+END_SRC

* ssh
** 上传本地key到服务器
#+begin_src sh
 $ ssh-keygen -t  rsa
 $ ssh-copy-id -i ~/.ssh/id_rsa.pub  root@192.168.0.3
#+end_src
* google host
** [[https://github.com/racaljk/hosts/blob/master/hosts][github]]
* linux
** system optimise
*** free memery cache
sync & echo 3 > /proc/sys/vm/drop_caches
** keyboard
*** swap CAPSLOCK and CTRL
#+BEGIN_SRC sh
$ setxkbmap -option "ctrl:swapcaps"
$ xmodmap
  !
  ! Swap Caps_Lock and Control_L
  !
  remove Lock = Caps_Lock
  remove Control = Control_L
  keysym Control_L = Caps_Lock
  keysym Caps_Lock = Control_L
  add Lock = Caps_Lock
  add Control = Control_L
#+END_SRC
*** make CAPSLOCK an additional CTRL
setxkbmap -option "ctrl:nocaps"
** network
*** dns cache cleanup
sudo /etc/init.d/dns-clean restart
*** dns nameserver
- add nameservers to /etc/network/interfaces #only 3
- add nameservers to /etc/resolvconf/resolv.conf.d/tail
*** vpn log
tail -f /var/log/syslog
** productivity
1. paste [按列合并文件]
2. sed -r 's#(.*)(.*)#echo \2#ge' [pass matched group to shell command]
** makefile
*** variable assignments
1, makefile中的变量赋值其实就是字符串替换
2, "=" 递归展开变量：如果变量的定义引用了其它的变量，那么引用会一直展开下去，直到找到被引用的变量的最新的定义，并以此作为改变量的值返回
3, ":=" 简单扩展变量：在变量的定义点，按照被引用的变量的当前值进行展开
4, "+=" 为已定义的变量添加新的值
5, "?=" 赋默认值：如果没有初始化该变量，就给它赋上默认值
** disk
1. 添加ssd硬盘
#+BEGIN_QUOTE
/dev/sdb1       /ssd            ext4    noatime,discard,defaults    0       3
#+END_QUOTE
* emacs
** key
*** Blank
1. 'C-x C-o' :delete-blank-lines [Delete extra blank lines between paragraphs]
*** File mode
**** Open file in c++-mode
1. put "// -*-c++-*-" at the top of the file
2. (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
*** lines
1) 'C-o' :open-line [Insert a blank line after the cursor]
2) 'C-M-o' :split-line [new line, and align it at same column of cursor]
3) 'M-^' :join this line to previous line
4) 'C-u M-^' :join following line to this line
*** Indent
1. 'M-/^/' :delete-indentation [join two line, and delete the front indentation of cursor]
2. 'C-M \' :indent-region [indents each line in the “usual” way]
3. '<TAB>' :indent-region
4. 'C-x <TAB>' :indent-rigidly
5. 'M-m' :back-to-indentation
*** Spaces
1. 'M-\' :delete-horizontal-space [deletes all spaces and tabs around the cursor]
*** upcase/downcase
1. 'M-l' :downcase-word [Convert following word to lower case]
2. 'M-u' :upcase-word [Convert following word to upper case]
3. 'M-c' :capitalize-word [Capitalize the following word]
4. 'C-x C-l' :downcase-region [Convert region to lower case]
5. 'C-x C-u' :upcase-region [Convert region to upper case]
*** align
1. :align-current
2. :align-regexp [lets you align a region by a regex in complex ways]
*** rectangles
1. 'C-x r k' :kill-rectangle
2. 'C-x r d' :delete-rectangle
3. 'C-x r y' :yank-rectangle
4. 'C-x r o' :open-rectangle [Insert blank space to fill the space of the region-rectangle]
5. 'C-x r c' :clear-rectangle
6. 'M-x delete-whitespace-rectangle'
7. 'C-x r t' /string/ <RET> :string-rectangle [Replace rectangle contents with string on each line]
8. 'M-x string-insert-rectangle <RET>' /string/ <RET> [Insert string on each line of the rectangle.]
9. '[C-u] C-x r N' :rectangle-number-lines
*** org mode
1. 'C-c '(single quote)' : [edit included source code]
*** Search
1. 'C-M-s' : [regex i-search]
2. 'M-c' : [Typing M-c within an incremental search toggles the case sensitivity of that search.]
** org-mode
*** key
1. 'C-c C-j' : org-goto
2. 'C-c C-v' : org-babel
3. To insert a structural element, type a ‘<’, followed by a template selector and <TAB>.
#+BEGIN_VERSE
s	#+BEGIN_SRC ... #+END_SRC
e	#+BEGIN_EXAMPLE ... #+END_EXAMPLE
q	#+BEGIN_QUOTE ... #+END_QUOTE
v	#+BEGIN_VERSE ... #+END_VERSE
c	#+BEGIN_CENTER ... #+END_CENTER
l	#+BEGIN_LaTeX ... #+END_LaTeX
L	#+LaTeX:
h	#+BEGIN_HTML ... #+END_HTML
H	#+HTML:
a	#+BEGIN_ASCII ... #+END_ASCII
A	#+ASCII:
i	#+INDEX: line
I	#+INCLUDE: line
#+END_VERSE
** packages
*** update
1. [list-packages]: press 'U' for all packages which can be upgraded, and key 'x' to do upgrading.
2. [helm-list-elisp-packages]: 'M-U'
** features
*** coding
1. [set-buffer-file-coding-system]: 设置文件编码
*** log
1. keep-lines/flush-lines
* sql
** distinct
1. select distinct(id) from table; [选择并去重]
2. select count(distinct id) from table; [计算不重复的个数]
3. select *,count(distinct id) from table group by id; [以id为临时主键选取数据]
* wireshark
** tshark
1. analysis pcap file
tshark -r ssl_capture.pcap -d tcp.port==4443,ssl -R "(tcp.dstport eq 4443 and tcp.flags.syn == 1) or (tcp.srcport eq 4443 and ssl.change_cipher_spec)" -T fields -e frame.time_relative 2> /dev/null
* SSL/TLS
** 内容加密
加密算法分两种：对称加密和非对称加密。所谓对称加密（也叫密钥加密）就是加密和解密使用相同的密钥。而非对称加密（也叫公钥加密）就是指加密和解密使用了不同的密钥。
*** 非对称密钥交换
**** RSA密钥协商过程
1. 客户端发送client_hello, 包含随机数R1
2. 服务端回复server_hello，包含随机数R2，以及包含证书公钥P的certificate
3. 客户端使用R2生成premaster_secret和master_secret。premaster_secret长度为48个字节，前两个字节是协议版本，剩下的填充一个随机数
   Master_key = PRF(premaster_secrect, "master secert", R1 + R2)
   至此，客户端侧的密钥已经完成协商。
4. 客户端使用P加密premaster_secret并发送给服务端
5. 服务端使用私钥解密得到premaster_secret，使用相同的公式就可以得到master_secret
**** ECDHE密钥协商
1. 客户端发送client_hello，包含随机数R1和两个扩展
   1）elliptic_curves：客户端支持的曲线类型和有限域参数
   2）ec_point_formats：支持的曲线点格式，默认uncompressed
2. 服务端回复server_hello，包含随机数R2及ECC扩展。
3. 服务端回复certificate，携带了公钥
4. 服务端生成ECDH临时公钥，同时回复server_key_exchange，包含三个重要内容：
   1）ECC相关参数
   2）ECDH临时公钥
   3）ECC参数和公钥生成的签名值，用户客户端校验
5. 客户端接受server_key_exchange之后，使用证书公钥进行签名解密和校验，获取服务器端的ECDH临时公钥，生成共享密钥
   至此，客户端完成密钥协商
6. 客户端生成ECDH临时公钥和client_key_exchange消息，不需要加密
7. 服务器处理client_key_exchange消息，获取客户端ECDH临时公钥，最总生成共享密钥
* git
** patch
#+begin_src sh
$ git format -n commit //生成最近n个点的patch
#+end_src
* android
** ContentProvider
*** 基本概念
安卓不同应用或服务间共享数据的一种方式，C/S模式，提供insert/delete/update/query四种接口，使用SQL语法设计接口参数。
*** 开发指导
**** Provider
1. 继承android.content.ContentProvider, 实现insert/delete/update/query四个接口
2. manifest文件中在application节点定义provider，包括name/authorities和permission。可以使用path-permission限定数据访问集合
#+BEGIN_SRC java
<application>
        <provider android:name=".BookmarkProvider"
                  android:authorities="com.android.browser;browser"
                  android:multiprocess="false"
                  android:exported="true"
                  android:readPermission="com.android.browser.permission.READ_HISTORY_BOOKMARKS"
                  android:writePermission="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS">
            <path-permission android:path="/bookmarks/search_suggest_query"
                    android:readPermission="android.permission.GLOBAL_SEARCH" />
        </provider>
    </application>
#+END_SRC
3. 使用UriMatcher指定Content Uri Path和ID，指向不同的数据集
**** Requester
1. manifest文件中声明permission
2. 使用getContentResolver().insert/query/update/delete
**** 关于global_search
1. Provider声明了android.permission.GLOBAL_SEARCH，其他应用可以在不知道authority的情况下获取需要的数据
2. Provider要添加res/xml/searchable.xml，关键说明searchSuggestAuthority、searchSuggestPath和searchSuggestSelection
#+BEGIN_SRC java
<searchable xmlns:android="http://schemas.android.com/apk/res/android"
    android:label="@string/app_name_title"
    android:includeInGlobalSearch="true"
    android:searchSettingsDescription="@string/bookmarks_fragment_title"
    android:searchSuggestAuthority="com.android.browser"
    android:searchSuggestIntentAction="android.intent.action.VIEW"
    android:searchSuggestPath="bookmarks"
    android:searchSuggestSelection="url LIKE ?"/>
#+END_SRC
3. Requester可以通过SearchManager.getSearchablesInGlobalSearch，获得searchable列表，从而得到想要的数据
#+BEGIN_SRC java
  SearchManager searchManager = (SearchManager) this.getSystemService(Context.SEARCH_SERVICE);
          List<SearchableInfo> searchableInfos = searchManager.getSearchablesInGlobalSearch();
          if (searchableInfos == null) return null;
          for (SearchableInfo si : searchableInfos) {
              ...
          }
#+END_SRC
**** 其他
1. content uri格式: content://authority/path[/#id]
2. command tools:
#+BEGIN_SRC shell
$ adb shell content
#+END_SRC

** 小米adb
1, *#*#717717#*#* 调试号码
** run-as
1, 非root手机，debug包，以包名用户运行
#+BEGIN_SRC sh
$ adb shell
$ run-as com.android.browser
#+END_SRC
* Speedy
* Algorithm
** 排序算法
**** 快速排序
***** 算法步骤
1. 选择一个元素作为基准值
2. 把比基准值小的元素放左边，比基准值大的放右边，一样大的可换可不换
3. 按相同的方式分别处理基准值两侧的元素集合
经过一趟快排后，基准值的位置就固定了
***** 性能
平均状况下时间复杂度是O(nlogn), 最差情况下是O(n^2)
**** 堆排序算法
***** 算法步骤
1. 把n个元素的集合建立成堆
2. 将堆顶和最后一个元素调换
3. 将剩余n-1个元素重复a->b的过程
利用大小堆的近似完全二叉树的存储结构，建堆取堆顶元素
***** 性能
平均性能的时间复杂度是O(nlogn)
辅助空间是O(1)
是一种不稳定的排序算法
**** 归并排序
***** 算法步骤
应用分治法
1. 请空间，使其大小为两个已排序序列大小之和
2. 用两个指针，分别指向两个序列的首部
3. 较两个指针指向的元素大小，选择相对小的放到合并空间，指针移位
4. 复c，直到有指针到尾
5. 另一个指针的元素直接合并到申请空间
***** 性能
仅次于快排，是一种稳定的算法。
时间复杂度是O(nlogn)，空间复杂度是O(n)
**** 二分查找
必须顺序存储，必须按关键字有序
***** 算法步骤
1. 选择中间位置，比较大小
2. 如果不同，则继续在相应的折半区间从中间位置开始比较
***** 性能
时间复杂度O(logn)
**** BFPRT(线性查找算法)
从n个元素中选取第k大小的元素，可以保证在最坏情况下仍为线性复杂度
***** 算法步骤
1. 将n个元素按5个一组，分成n/5组
2. 使用任意排序方法排列每个分组，确定每个组的中位数
3. 按1->2递归的选取最后的中位数x，偶数个元素选取较小的一个
4. 用x来分割元素集，比x小的[k]放左边，大的[n-k]放右边，即快排的一次分区(partion)
5. 如果i==k，则返回x；如果i<k，则在小于x的元素中递归查找第i小的元素；否则在大于x的元素中查找第i-k小的元素
***** 性能
最坏情况下时间复杂度为O(n)
**** DFS(深度优先搜索)
沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点
***** 算法步骤
1. 选取图中某一顶点Vi，访问并标记该顶点
2. 以Vi为当前顶点，依次搜索Vi的邻接点Vj；如果Vj没有被访问过，则访问和标记Vj；如果Vj已经被访问过，则访问Vi的下一个邻接点
3. 以Vj为当前顶点，重复步骤2)，直到图中和Vi有路径相通的点都被访问过
4. 如果图中还有尚未被访问的点，则选取一个重复上面的过程，直到所有的点被访问
***** 性能
是盲目搜索，迷宫问题/8皇后问题
**** BFS(广度优先算法)
BFS是从根节点开始，沿着树(图)的宽度遍历树(图)的节点。如果所有节点均被访问，则算法中止
***** 算法步骤
用队列辅助实现
1. 首先将根节点放入队列
2. 从队列中取出第一个节点，检验是否为目标，否则将其直接子节点放入队列中
3. 若队列为空，表示整张图都已经遍历过了
4. 重复步骤2
***** 性能
是盲目搜索
**** Dijkstra算法
典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径
***** 算法步骤
1. 初始时，S只包含一个源点，s={v}。U包含其他顶点，若v与U中顶点有连接，则<v,u>有权重，否则为无穷大
2. 从U中选取一个距离v最小的点k，把k列入S中
3. 以k为新考虑的中间点，计算U中各顶点的距离；若从k经过的到u的距离比原来的距离短，则修改u的距离值，为经过k的距离值
4. 重复2)->3)，直到所有点都在S中
**** 动态规划算法
参看[[https://www.topcoder.com/community/data-science/data-science-tutorials/dynamic-programming-from-novice-to-advanced/][dynamic-programming-from-novice-to-advanced]]
中文版[[http://www.hawstein.com/posts/dp-novice-to-advanced.html][动态规划：从新手到专家]]
