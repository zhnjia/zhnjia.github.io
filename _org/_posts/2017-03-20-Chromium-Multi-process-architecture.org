#+OPTIONS: ^:nil toc:nil \n:t
#+STARTUP: showall indent
#+STARTUP: hidestars

#+BEGIN_HTML
---
layout: default
title: Chromium Multi-process Architecture
---
#+END_HTML
#+TOC: headlines 2

简单翻译下Chromium的多进程架构文档，原文档[[https://sites.google.com/a/chromium.org/dev/developers/design-documents/multi-process-architecture][Mulite-process Architecture]]

* 问题引入
几乎不可能建立一个不会崩溃或挂起的渲染引擎，同样也几乎不可能达到几乎完美的安全性能。
从某方面来讲，2006年的浏览器是一个类似单用户-多任务协调合作的操作系统。一个行为不端的网页就像一个行为不端的应用会毁掉整个操作系统，它也会毁掉浏览器。只要一个小小的浏览器或者插件的bug就可以搞跨整个浏览器以及所有已经打开的标签页面。
现代操作系统把每个应用程序运行在一个独立的进程里，每个进程都相互隔离，所以很健壮。一个程序崩溃了，不会妨害其他的程序，也不会影响操作系统的健壮。用户之间的数据访问是受限制的。
* 架构总揽
我们给每个标签页建立独立的进程，防止渲染引擎的bug和故障导致整个应用崩溃。同样限制渲染引擎之间，以及渲染引擎和其他部分的访问。也就是给网页浏览带来了内存保护以及操作系统的访问控制。
运行UI，管理标签和插件的进程成为"browser process"或"browser"。同样地，标签页进程称为"render process"或者"renders"。渲染引擎使用开源的Blink来解析布局HTML页面。
[[../img/arch.png
]]
